/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package wiremock;

import java.net.URI;
import java.net.URISyntaxException;

import org.json.JSONObject;
import org.testng.Assert;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import com.github.tomakehurst.wiremock.WireMockServer;
import com.github.tomakehurst.wiremock.client.ResponseDefinitionBuilder;
import com.github.tomakehurst.wiremock.client.WireMock;
import com.relevantcodes.extentreports.LogStatus;

import io.restassured.RestAssured;
import io.restassured.response.Response;
import io.restassured.specification.RequestSpecification;

public class LibraryTest {
    
	//code for wiremock
	private static final int PORT=3000;
	private static final String HOST="localhost";
	private static WireMockServer server=new WireMockServer(PORT);

	@BeforeClass
	public static void setUp()
	{
	server.start();
	ResponseDefinitionBuilder mockResponse=new ResponseDefinitionBuilder();
	mockResponse.withStatus(200);
	mockResponse.withBody("body");
	WireMock.configureFor(HOST, PORT);
	WireMock.stubFor(
	WireMock.get("/users/3").willReturn(mockResponse)
	);
	
	
	/*
	 * ResponseDefinitionBuilder mockResponse1=new ResponseDefinitionBuilder();
	 * mockResponse1.withStatus(201).withBody("json-body").withHeader("Content-Type"
	 * ,"application/json"); WireMock.configureFor(HOST, PORT); WireMock.stubFor(
	 * WireMock.post("/users").willReturn(mockResponse1) );
	 */
	 
	
	}

	//test using mock server
	@Test
	public void Getrequest(){
		
		
		Response resp= RestAssured.get("http://localhost:3000/users/3");
		int code=resp.getStatusCode();
		System.out.println("code is "+code);
		Assert.assertEquals(code,200);
		String data= resp.asString();
		System.out.println("data is"+data);	
	
	}
	
		@Test
		public void postresquest()
		{
		
			
			Response resp=RestAssured.post("http://localhost:3000/users");
			int code=resp.getStatusCode();
			System.out.println("code is "+code);
			Assert.assertEquals(code,201);		
			
			
		}
		
	
	@AfterClass
	public static void tearDown()
	{
	if(null !=server && server.isRunning())
	{
	server.shutdownServer();
	}
	}
	}